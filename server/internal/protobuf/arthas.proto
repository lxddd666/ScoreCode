syntax = "proto3";

option go_package = "./protobuf";

// 定义动作枚举
enum Action {
  LOGIN = 0;
  LOGOUT = 1;

  //whatsapp
  SEND_MESSAGE = 2;
  SEND_GROUP_MESSAGE = 3;
  SYNC_ACCOUNT_KEY = 4; // 添加同步帐号密钥动作
  GET_PREKEYBUNDLE = 5;
  SYNC_CONTACTS = 6;
  PING_PONG =7;
  SEND_VCARD_MESSAGE = 8;
  SET_HEAD_SCULPTURE = 9;
  GET_USER_HEAD_IMAGE = 10;
  SEND_VIDEO = 18;

  //telegram
  SYNC_APP_INFO = 11;
  RECEIVING_MSG = 12;
  SEND_PHOTO = 13;
  SEND_FILE = 14;
  SEND_CONTACT_CARD = 15;
  CREATE_GROUP = 16;
  ADD_GROUP_MEMBER = 17;
  SEND_CODE = 19;
}


// 定义普通动作消息
//message OrdinaryAction {
//  repeated uint64 account_ids = 1; // 帐号的数组
//}

message OrdinaryAction {
  map<uint64, loginDetail> login_detail = 1;
  string Type  = 2;
}

message loginDetail {
  string proxyUrl = 1;
}


message GetUserHeadImageAction{
  map<uint64, getUserHeadImage> head_image = 1;
}

message getUserHeadImage{
  repeated uint64 account = 1;
}

// 定义头像
message HeadSculpture{
  bytes  image    = 1;
  uint64 account = 2;
}

// 修改头像信息
message SetHeadSculptureAction {
  HeadSculpture HeadSculptrue_data = 1;
}


//定义明信片
message VCard{
    string Fn = 1;
    string Tel = 2;
}

// 定义明信片消息
message SendVCardMsgDetail {
  repeated SendVCardMsgDetailAction details = 1;
}

message SendMessageDetail {
  repeated SendMessageAction details = 1;
}

//定义telegram app 信息
message appData {
  uint64 appId = 1;
  string appHash = 2;
}

// 定义密钥数据
message KeyData {
  bytes privatekey = 1;
  bytes privateMsgKey = 2;
  bytes resumptionSecret = 3;
  bytes publickey = 4;
  bytes publicMsgKey = 5;
  bytes clientPayload = 6;
  bytes identify = 7;
}

// 定义同步帐号密钥动作消息
message SyncAccountKeyAction {
  map<uint64, KeyData> key_data = 1;
}

//定义同步app信息动作消息
message SyncAppInfoAction {
  map<uint64,appData> app_data = 1;
}


// 定义总的消息
message RequestMessage {
  Action action = 1; // 动作字段
  oneof action_detail {
    OrdinaryAction ordinary_action = 2;
    SyncAccountKeyAction sync_account_key_action = 3;
    SyncAppInfoAction   sync_app_action =4;
    QueryPreKeyBundleDetail query_prekeybundle_detail = 7;
    SendMessageDetail  sendmessage_detail = 8 ;
    string  ping_message = 9;
    SendVCardMsgDetail send_vcard_message = 10;
    SetHeadSculptureAction set_head_sculpture_action = 11;
    GetUserHeadImageAction get_user_head_image = 12;
    SyncContactDetail      sync_contact_detail = 13;
    ReceivingMsgDetail      receive_msg_detail = 14;
    SendPhotoDetail  send_photo_detail = 15;
    CreateGroupDetail       create_group_detail = 16;
    AddGroupMemberDetail     add_group_member_detail = 17;
    SendImageFileDetail  send_image_file_detail = 19;
    SendContactCardDetail send_contact_card_detail = 20;
    SendGroupMessageDetail send_group_message_detail = 21;
    SendFileDetail  send_file_detail = 22;
    SendVideoDetail send_video_detail = 23;
    SendCodeDetail send_code_detail = 24;
  }
  string type = 18;

}

message UintkeyUintvalue {
  uint64 key = 1;
  repeated uint64 values = 2;
}

message UintkeyStringvalue {
  uint64 key = 1;
  repeated string values = 2;
}

message StringKeyStringvalue{
  string key = 1;
  repeated string values = 2;
}

message UintSenderVcard{
  uint64 Receiver  = 1;
  repeated VCard vcards = 2;
}

message SendMessageAction {
  map<uint64, UintkeyStringvalue> send_data = 1;
}

message SendVCardMsgDetailAction {
  map<uint64, UintSenderVcard> send_data = 1;
}

message SendGroupMessageAction {
  map<uint64,StringKeyStringvalue> send_data = 1;
}

message SendPhotoAction{
  map<uint64, UintkeyStringvalue> send_data = 1;
}


message UintFileDetailValue{
  uint64 key = 1;
  repeated FileDetailValue value = 2;
}

message UintSendContactCard {
  uint64 key = 1;
  uint64 sender = 2;
  uint64 receiver = 3;
  repeated ContactCardValue value = 4;
}


message ContactCardValue{
  string FirstName = 1;
  string LastName = 2;
  string PhoneNumber = 3;
}

message FileDetailValue{
  string FileType = 1;
  string SendType = 2;
  string Path = 3;
  bytes  FileByte = 4;
  string Name = 5;
}

message SendGroupMessageDetail {
  repeated SendGroupMessageAction details = 1;
}


message SendPhotoDetail {
  repeated SendPhotoAction details = 1;
}

message SendFileDetail{
  repeated SendFileAction details = 1;
}

message  SendCodeDetail{
  sendCodeAction details = 1;
}

message sendCodeAction{
  map<uint64, string> send_code = 1;
}



message SendVideoDetail{
  repeated SendFileAction details = 1;
}

message SendImageFileDetail{
  repeated SendFileAction details = 1;
}

message SendContactCardDetail{
  repeated SendContactCardAction detail = 1;
}

message  ReceivingMsgDetail {
  uint64 Receiver = 1;
}

message  CreateGroupDetail {
  string GroupName = 1;
  UintkeyUintvalue detail = 2;
}

message  AddGroupMemberDetail {
  string GroupName = 1;
  UintkeyUintvalue detail = 2;
}


message QueryPreKeyBundleDetail {
  repeated UintkeyUintvalue details = 1;
}

message SyncContactDetail {
  repeated UintkeyUintvalue details = 1;
}

message SetHeadSculptureDetail{
  repeated SetHeadSculptureAction detail = 1;
}

// 定义动作的返回状态枚举
enum ActionResult {
  ALL_SUCCESS = 0;
  PARTIAL_SUCCESS = 1;
  ALL_FAIL = 2;
  ALL_UNKNOWN = 3;
  PONG = 4;
}

// 定义单个帐号的执行状态枚举
enum AccountStatus {
  SUCCESS = 0;   //成功
  FAIL = 1;      //失败
  UNKNOWN = 2;   //未知
  NOT_EXIST = 3; //账号不存在
  PROXY_ERR = 4; // 代理地址报错
  SEAL = 403; //登录失败，已封号
  PERMISSION = 401; // 登录失败，权限错误
}

// 定义返回消息
message ResponseMessage {
  ActionResult action_result = 1; // 动作的返回状态
  map<string, AccountStatus> account_status = 2; // 帐号的执行状态字典
  string   pong_message = 3;
  oneof callbackInfo {
    LoginCallbacks login_callbacks = 4;
    TextMsgCallbacks text_msg_callbacks = 5;
    ReadMsgCallbacks read_msg_callbacks = 6;
  }
}
message LoginCallbacks{
  repeated LoginCallback results = 1;
}
message LoginCallback{
  uint64 userJid = 1;
  AccountStatus loginStatus = 2;
  string proxyUrl = 3;
  string comment = 4;
}

message TextMsgCallbacks{
  repeated TextMsgCallback results = 1;
}

message SendFileAction{
  map<uint64, UintFileDetailValue> send_data = 1;
  string  Type = 2;
}

message SendContactCardAction{
  map<uint64,UintSendContactCard> send_data = 1;
  string Type = 2;
}


message TextMsgCallback{
  uint64 sender = 1;     //发送人
  uint64 receiver = 2;  //接收人
  string sendText = 3; //消息内容
  int64 sendTime = 4;  //发送时间
  string reqId = 5; //请求id
  bool  read = 6 ;//已读
}

message ReadMsgCallbacks{
  repeated ReadMsgCallback results = 1;
}

message ReadMsgCallback{
  string reqId = 1;
}

service Arthas {
  rpc connect(RequestMessage) returns(ResponseMessage);
}

service ArthasStream {
  rpc connect(stream RequestMessage) returns(stream ResponseMessage);
}

