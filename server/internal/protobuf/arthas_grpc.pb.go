// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: protobuf/arthas.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArthasClient is the client API for Arthas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArthasClient interface {
	Connect(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
}

type arthasClient struct {
	cc grpc.ClientConnInterface
}

func NewArthasClient(cc grpc.ClientConnInterface) ArthasClient {
	return &arthasClient{cc}
}

func (c *arthasClient) Connect(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/Arthas/connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArthasServer is the server API for Arthas service.
// All implementations must embed UnimplementedArthasServer
// for forward compatibility
type ArthasServer interface {
	Connect(context.Context, *RequestMessage) (*ResponseMessage, error)
	mustEmbedUnimplementedArthasServer()
}

// UnimplementedArthasServer must be embedded to have forward compatible implementations.
type UnimplementedArthasServer struct {
}

func (UnimplementedArthasServer) Connect(context.Context, *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedArthasServer) mustEmbedUnimplementedArthasServer() {}

// UnsafeArthasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArthasServer will
// result in compilation errors.
type UnsafeArthasServer interface {
	mustEmbedUnimplementedArthasServer()
}

func RegisterArthasServer(s grpc.ServiceRegistrar, srv ArthasServer) {
	s.RegisterService(&Arthas_ServiceDesc, srv)
}

func _Arthas_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArthasServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Arthas/connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArthasServer).Connect(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Arthas_ServiceDesc is the grpc.ServiceDesc for Arthas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Arthas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Arthas",
	HandlerType: (*ArthasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "connect",
			Handler:    _Arthas_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/arthas.proto",
}

// ArthasStreamClient is the client API for ArthasStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArthasStreamClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (ArthasStream_ConnectClient, error)
}

type arthasStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewArthasStreamClient(cc grpc.ClientConnInterface) ArthasStreamClient {
	return &arthasStreamClient{cc}
}

func (c *arthasStreamClient) Connect(ctx context.Context, opts ...grpc.CallOption) (ArthasStream_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArthasStream_ServiceDesc.Streams[0], "/ArthasStream/connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &arthasStreamConnectClient{stream}
	return x, nil
}

type ArthasStream_ConnectClient interface {
	Send(*RequestMessage) error
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type arthasStreamConnectClient struct {
	grpc.ClientStream
}

func (x *arthasStreamConnectClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *arthasStreamConnectClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArthasStreamServer is the server API for ArthasStream service.
// All implementations must embed UnimplementedArthasStreamServer
// for forward compatibility
type ArthasStreamServer interface {
	Connect(ArthasStream_ConnectServer) error
	mustEmbedUnimplementedArthasStreamServer()
}

// UnimplementedArthasStreamServer must be embedded to have forward compatible implementations.
type UnimplementedArthasStreamServer struct {
}

func (UnimplementedArthasStreamServer) Connect(ArthasStream_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedArthasStreamServer) mustEmbedUnimplementedArthasStreamServer() {}

// UnsafeArthasStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArthasStreamServer will
// result in compilation errors.
type UnsafeArthasStreamServer interface {
	mustEmbedUnimplementedArthasStreamServer()
}

func RegisterArthasStreamServer(s grpc.ServiceRegistrar, srv ArthasStreamServer) {
	s.RegisterService(&ArthasStream_ServiceDesc, srv)
}

func _ArthasStream_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArthasStreamServer).Connect(&arthasStreamConnectServer{stream})
}

type ArthasStream_ConnectServer interface {
	Send(*ResponseMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type arthasStreamConnectServer struct {
	grpc.ServerStream
}

func (x *arthasStreamConnectServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *arthasStreamConnectServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArthasStream_ServiceDesc is the grpc.ServiceDesc for ArthasStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArthasStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ArthasStream",
	HandlerType: (*ArthasStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "connect",
			Handler:       _ArthasStream_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/arthas.proto",
}
